//OPCODE CONSTANTS - not exhaustive! (supports only immediate branches)
const uint(6) rtype = 0;
const uint(6) rtype2 = 28;
const uint(6) loadb = 32;
const uint(6) loadh = 33;
const uint(6) loadw = 35;
const uint(6) storeb = 40;
const uint(6) storeh = 41;
const uint(6) storew = 43;
const uint(6) addi = 6;
const uint(6) andi = 12;
const uint(6) ori = 13;
const uint(6) xori = 14;
const uint(6) jump = 2;
const uint(6) jumplink = 3;
const uint(6) brancheq = 4;
const uint(6) branchneq = 5;
const uint(6) branchlez = 6;
const uint(6) branchgtz = 7;

//FUNCT encoding for R-type instructions
const uint(6) add = 32;
const uint(6) sub = 34;
const uint(6) and = 36;
const uint(6) or = 37;
const uint(6) xor = 38;
const uint(6) slt = 43;
const uint(6) jr = 8;

//ALU Function Control
const uint(3) alu_add = 2;
const uint(3) alu_sub = 6;
const uint(3) alu_slt = 7;
const uint(3) alu_or = 1;
const uint(3) alu_xor = 4;
const uint(3) alu_and = 0;

//ALU
int(32) res inst_alu(int(32) a, int(32) b, int(32) imm,  int(1) imm_op, uint(3) alu_fun){
  int(32) srca;
  int(32) srcb;

  srca = a;

  if (imm_op) srcb = imm; else srcb=b;
  
  switch(alu_fun) {
  case alu_add : res = srca + srcb;
  case alu_sub : res = srca - srcb; 
  case alu_slt : if (srca < srcb) res = 1; else res = 0;
  case alu_or : res = srca || srcb;
  case alu_xor : res = srca ^ srcb;
  case alu_and : res = srca && srcb;
  default : res = srca + srcb;
  }
}

//Control Unit
(
  int(1) cubranch = 0,
  int(1) cumem_rd = 0,
  int(1) cumem_we = 0,
  uint(2) cumem_mask = 0,
  int(1) curf_we = 0,
  int(1) cudest_rd = 0,
  uint(3) cualu_fun = 0,
  int(1) cuimm_op = 0,
  int(1) cuinvalid_op = 0
) inst_cu(uint(6) op, uint(6) funct, int(1) comp_res){

  switch(op) {
  case rtype : 
    cubranch = 0;
    cumem_rd = 0;
    cumem_we = 0;
    cumem_mask = 0;
    curf_we = 1;
    cudest_rd = 1;
    cuimm_op = 0;
   switch(funct) {
    case add : cualu_fun = alu_add; cuinvalid_op = 0; 
    case sub : cualu_fun = alu_sub; cuinvalid_op = 0; 
    case and : cualu_fun = alu_and; cuinvalid_op = 0; 
    case or : cualu_fun = alu_or; cuinvalid_op = 0; 
    case xor : cualu_fun = alu_xor; cuinvalid_op = 0; 
    case slt : cualu_fun = alu_slt; cuinvalid_op = 0; 
    case jr : cualu_fun = alu_add; cuinvalid_op = 0; cubranch = 1; curf_we = 0; 
    default : cualu_fun = 0; cuinvalid_op = 1;
    } 
  case loadb :
    cubranch = 0;
    cumem_rd = 1;
    cumem_we = 0;
    cumem_mask = 0;
    curf_we = 1;
    cudest_rd = 0;
    cuimm_op = 1;
    cualu_fun = alu_add;
    cuinvalid_op = 0;
    
  case loadh :
    cubranch = 0;
    cumem_we = 0;
    cumem_rd = 1;
    cumem_mask = 1;
    curf_we = 1;
    cudest_rd = 0;
    cuimm_op = 1;
    cualu_fun = alu_add;
    cuinvalid_op = 0;
    
  case loadw :
    cubranch = 0;
    cumem_rd = 1;
    cumem_we = 0;
    cumem_mask = 3;
    curf_we = 1;
    cudest_rd = 0;
    cuimm_op = 1;
    cualu_fun = alu_add;
    cuinvalid_op = 0;
    
  case storeb :
    cubranch = 0;
    cumem_rd = 0;
    cumem_we = 1;
    cumem_mask = 0;
    curf_we = 0;
    cudest_rd = 0;
    cuimm_op = 1;
    cualu_fun = alu_add;
    cuinvalid_op = 0;
    
  case storeh :
    cubranch = 0;
    cumem_rd = 0;
    cumem_we = 1;
    cumem_mask = 1;
    curf_we = 0;
    cudest_rd = 0;
    cuimm_op = 1;
    cualu_fun = alu_add;
    cuinvalid_op = 0;
    
  case storew :
    cubranch = 0;
    cumem_rd = 0;
    cumem_we = 1;
    cumem_mask = 3;
    curf_we = 0;
    cudest_rd = 0;
    cuimm_op = 1;
    cualu_fun = alu_add;
    cuinvalid_op = 0;
    
  case addi :
    cubranch = 0;
    cumem_rd = 0;
    cumem_we = 0;
    cumem_mask = 0;
    curf_we = 1;
    cudest_rd = 0;
    cuimm_op = 1;
    cualu_fun = alu_add;
    cuinvalid_op = 0;
    
  case andi :
    cubranch = 0;
    cumem_rd = 0;
    cumem_we = 0;
    cumem_mask = 0;
    curf_we = 1;
    cudest_rd = 0;
    cuimm_op = 1;
    cualu_fun = alu_and;
    cuinvalid_op = 0;
    
  case ori :
    cubranch = 0;
    cumem_rd = 0;
    cumem_we = 0;
    cumem_mask = 0;
    curf_we = 1;
    cudest_rd = 0;
    cuimm_op = 1;
    cualu_fun = alu_or;
    cuinvalid_op = 0;
    
  case xori :
    cubranch = 0;
    cumem_rd = 0;
    cumem_we = 0;
    cumem_mask = 0;
    curf_we = 1;
    cudest_rd = 0;
    cuimm_op = 1;
    cualu_fun = alu_xor;
    cuinvalid_op = 0;
    
  case jump :
    cubranch = 1;
    cumem_rd = 0;
    cumem_we = 0;
    cumem_mask = 0;
    curf_we = 0;
    cudest_rd = 0;
    cuimm_op = 0;
    cualu_fun = alu_add;
    cuinvalid_op = 0;
    
  case 0 ://jumplink :
    cubranch = 1;
    cumem_rd = 0;
    cumem_we = 0;
    cumem_mask = 0;
    curf_we = 1;
    cudest_rd = 0;
    cuimm_op = 0;
    cualu_fun = alu_add;
    cuinvalid_op = 0;
    
  case brancheq :
    cubranch = comp_res;
    cumem_rd = 0;
    cumem_we = 0;
    cumem_mask = 0;
    curf_we = 0;
    cudest_rd = 0;
    cuimm_op = 0;
    cualu_fun = alu_add;
    cuinvalid_op = 0;

  case branchneq :
    cubranch = comp_res;
    cumem_rd = 0;
    cumem_we = 0;
    cumem_mask = 0;
    curf_we = 0;
    cudest_rd = 0;
    cuimm_op = 0;
    cualu_fun = alu_add;
    cuinvalid_op = 0;
    
  case branchlez :
    cubranch = comp_res;
    cumem_rd = 0;
    cumem_we = 0;
    cumem_mask = 0;
    curf_we = 0;
    cudest_rd = 0;
    cuimm_op = 1; //set to 1 to have an easier condition for stalling!
    cualu_fun = alu_add;
    cuinvalid_op = 0;

  case branchgtz :
    cubranch = comp_res;
    cumem_rd = 0;
    cumem_we = 0;
    cumem_mask = 0;
    curf_we = 0;
    cudest_rd = 0;
    cuimm_op = 1; //set to 1 to have an easier condition for stalling!
    cualu_fun = alu_add;
    cuinvalid_op = 0;
    
  default : 
    cubranch = 0;
    cumem_rd = 0;
    cumem_we = 0;
    cumem_mask = 0;
    curf_we = 0;
    cudest_rd = 0;
    cuimm_op = 0;
    cualu_fun = alu_add;
    cuinvalid_op = 1;
    
  }
}


//instruction memory
int(32) dout inst_imem(uint(32) adx){
  int(32) imem[256];

  dout = imem[adx];
}


//data memory
ASYNC int(32) dout inst_dmem(ASYNC uint(32) adx, ASYNC uint(2) mask,ASYNC int(32) din,ASYNC int(1) we){
  int(32) dmem[256];
  ASYNC int(32) wr;
  ASYNC int(32) cur;

  cur = dmem[adx];
  switch(mask) {
    case 0 : 
	wr(31:0) = cur(31:0);
	wr(7:0) = din(7:0); 
    case 1 :
	wr(31:16) = cur(31:16);
	wr(15:0) = din(15:0); 
    case 2 : 
	wr(31:24) = cur(31:24);
	wr(23:0) = din(23:0); 
    case 3 : wr = din;
    default : wr = din;
    }

  dmem[adx] = wr;

  POS(we); //dmem only should be registered!

  ASYNC int(32) rd;
  rd = dmem[adx];
  switch (mask) {
  case 0 : 
	dout(31:0) = 0;
	dout(7:0) = rd(7:0);      
  case 1 :
	dout(31:16) = 0;
	dout(15:0) = rd(15:0);
  case 2 :
	dout(31:24) = 0;
	dout(23:0) = rd(23:0); 
  case 3 : dout = rd;
  default : dout = rd; 
      }
}


//register file
( ASYNC int(32) rfouta = 0,
  ASYNC int(1) rfoutva = 1, 
  ASYNC int(32) rfoutb = 0,
  ASYNC int(1) rfoutvb = 1 )
inst_rf(ASYNC uint(5) adxa,
	ASYNC uint(5) adxb,
	ASYNC uint(5) adxw,
	ASYNC int(32) din,
	ASYNC int(1) we,
	ASYNC uint(5) f_adxw,
	ASYNC int(1) f_we,
	ASYNC int(1) stall){

  
  int(1) vrf[32] = 1; 
  int(32) rf[32] = 0;

  while (1) {
    if (we) if (adxw != 0) {
      rf[adxw] = din;
      vrf[adxw] = 1;
    }
  else if (!stall && f_we) if (f_adxw != 0) vrf[f_adxw] = 0;
  POS(1);
  }

  rfouta = rf[adxa];
  rfoutb = rf[adxb];
  rfoutva = vrf[adxa];
  rfoutvb = vrf[adxb];

}



